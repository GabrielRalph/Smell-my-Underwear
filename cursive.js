window.addEventListener('load', () => {
  var input = document.getElementById('input')
  var list = document.getElementsByTagName("myfont")
  var cookies = document.cookie.split(';')
  for(var i in cookies){
    if(cookies[i].replace(' ', '').split('=')[0]=='lastString'){
      input.value = cookies[i].replace(' ', '').split('=')[1]
      list[0].innerHTML = wordToPath(input.value)
    }
  }
  input.addEventListener('input', () => {
    document.cookie = 'lastString='+input.value
    list[0].innerHTML = wordToPath(input.value)
  })
})
let w = 48.2
let h = 99.2
let paths = {
  a: {
    path: "c1.5-3.6,9.3-10.8,24.4-11.7c0,0-27.4,1.4-25.8,19.4c1.4,16,25.7,5.1,25.7-18.9 c0.1,14.8-6,27.8,6.9,27.8",
    start: [5+9.2, 51],
    tangent: [5, 51+9.2],
    w: 50
  },
  b: {
    path: "c0,0,22,-31.8,12.3,-33.6s-13.5,34.2,-12.6,49.5c1,15.2,-0.1,13.7,5.2,13.3c5.4,-0.4,21.4,0.8,21.9,-14.2s-9.4,-13.8,-13.8,-13.9c-7.9,-0.2,-13.5,8.1,-13.5,8.1l1,20.5c0,0,-5,-0.9,12.1,-0.9",
    oldpath: "c2.9,-6.7,22.8,-31.8,11.9,-34.1c-6.8,-1.4,-20.5,62.9,-9.4,62.9c11.3,0,19,-3.8,19.1,-14.6c0.1,-11.4,-21.6,-14.2,-21.6,-14.2",
    start: [10.9,38.3],
    tangent: [10.9-5,38.3+9],
    w: 45
  },
  c: {
    path: "c4-4,16-5.9,18.7,0.7c-3.6-8.5-24.2-4.4-24.2,10.7c0,5.3,3.9,12.6,16.6,12.7",
    start: [16.3,43.7],
    tangent: [16.3 -5,43.7 +5],
    w: 45
  },
  d: {
    path: "c-18.7,0,-28,21.7,-18.3,27.4c9.6,5.7,17.8,-10.4,19.6,-13.4c11,-17.6,10.6,-48.1,6,-48.1c-6.6,0,-11.7,62.7,1.3,62.7",
    start: [30.9,39.1],
    tangent: [30.9 -20,39.1],
    w: 50
  },
  e: {
    path: "c4.9,-0.7,9.3,-0.2,14,-4.9c4.6,-4.6,6.8,-10.5,3.7,-13.6c-2.5,-2.5,-10.2,-0.8,-13.9,3.8c-10.4,12.7,-1.5,23.4,12.1,23.4",
    start: [15.4,59.3],
    tangent: [15.4 -10 ,59.3+1],
    w: 45
  },
  f: {
    path: "c8.6,-11,26.2,-33.5,13.6,-38c-15,-5.3,-13.7,56.6,-15.8,74.7s-12,19.3,-9.7,1.2c1.3,-10.7,8.2,-16,11,-18.8",
    start: [25,43.4],
    tangent: [25 -10,43.4+13],
    w: 45
  },
  g: {
    path: "c0,0,6.6,-8.4,20.6,-7.2c0,0,-15.4,-3.2,-23.2,11.1c-7.4,13.5,10.5,20.6,19.8,8.4l4,-19.2c-2.9,16.4,-8.3,39.4,-11.3,46.7s-8.4,11.4,-12,8.5c-4,-3.2, 30,-30.6 ,31.9,-31.7",
    start: [1.4+20,46.4],
    tangent: [1.4 -5 + 20 ,46.4 + 5],
    w: 45
  },
  h: {
    path: "c0,0,9.1,-14.5,12.1,-19.6s6.8,-14.7,3.8,-19c-3,-4.3,-8.8,7.6,-10.6,13.8s-10,48.8,-10,48.8s4.5,-29,18.7,-25.7c14.2,3.3,-8.5,25.3,6.9,25.4",
    start: [16,43.8],
    tangent: [16,43.8],
    w: 45
  },
  i: {
    path: "m0,-10 l 0,0.1m0,9.9c-1.9,4.5,-13.1,28.4,-0.5,28.4",
    start: [22.1,39.3],
    tangent: [22.1,39.3+10],
    w: 45
  },
  j: {
    path: "m 0,-10 l 0,0.1 m0,9.9c-0.8,4.4,-5.1,51.2,-16.5,42.6c-9.8,-7.5,14.6,-19.3,19.8,-21.8",
    start: [29,38.9],
    tangent: [29,38.9+5],
    w: 45
  },
  k: {
    path: "c5.4,-6.8,20.7,-18.3,21,-32s-9.2,-6.7,-11.1,-2.5s-15.9,56,-15.9,56s3.5,-26.5,15.4,-28.9s13.6,1.6,13.9,4.8s-8,6.6,-14.5,6.5s-7.8,-2.4,-7.8,-2.4s5.9,16.9,18.7,16.9",
    start: [11.3,49.3],
    tangent: [11.3,49.3],
    w: 45
  },
  l: {
    path: "c0,0-13.6,48.5,0,58.5",
    start: [15.8, 9.2],
    tangent: [12.8, 16.4],
    w: 30
  } ,
  m: {
    path: "c7.9,0,0,28,0,28s4.8,-28,19,-28c10.4,0,1.5,28.9,1.5,28.9s7.6,-28.7,19.3,-28.9c16,-0.3,-8.6,28.6,9.8,28.6",
    start: [7.8,39],
    tangent: [7.8-10,39],
    w: 65
  },

  n: {
    path: "c0,0,6.4-1,5.5,6c-0.9,7-6.8,22.3-6.8,22.3s8.6-29.1,20.6-28.3s-3.3,27.2,10.2,27.2",
    start: [10,39.4],
    tangent: [10-10,39.4],
    w: 45
  },
  o: {
    path: "c5.3,0.4,11.5,1.7,7.9,14.4s-10.1,14,-14.9,14s-10.5,-7.6,-8.6,-13.9c1.3,-4.9,6.5,-14.6,15.6,-14.5",
    start: [27.1,39.3],
    tangent: [27.1-15,39.3+5],
    w: 45
  },
  p: {
    path: "l-4.4,54.1c0,0,1.5,-55.4,16.2,-55.6c15,-0.1,9.2,19.4,4.9,24c-3.6,3.8,-9,5.1,-12.4,4.4c-3.9,-0.9,-5.4,-3.7,-5.4,-3.7c1.5,4.2,-5,3.9,7.8,3.9",
    start: [14.7,40.7],
    tangent: [14.7,40.7],
    w: 45
  },
  q: {
    path: "c7.8,-7.8,13.7,-8.7,20.3,-8.7c-16.6,-1.3,-28.6,16.1,-24.8,23.1c3.8,7,11.1,6.6,15.6,2c5.5,-5.6,9.3,-22,9.8,-23.5c1.1,-3.1,-9.3,53.4,-9.3,53.4",
    start: [17.2,48.2],
    tangent: [17.2,48.2],
    w: 45
  },
  r: {
    path: "c2.6,17.8,1.1,18.9,-0.4,28.3c3.3,-8.3,1.9,-28.1,11.5,-28.1c5.9,0,8.3,3.7,8.3,11.3",
    start: [14.7,39.3],
    tangent: [14.7,39.3+10],
    w: 45
  },
  s: {
    path: "c0,0,8.1,10.7,4.5,18s-7.1,8.1,-11,8.1c-4.7,0,-12.6,-6.3,-13.5,-10.7c1.1,4.4,8.7,10.7,13.1,10.7c12.9,0,19.8,-6.6,20.6,-7.5",
    start: [26.9,41.5],
    tangent: [26.9-5,41.5],
    w: 45
  },
  t: {
    path: "m5,20l-20,0m15,-20c-2.2,5.9-23.8,58.4-3.6,58.3",
    start: [31.1,9.4],
    tangent: [31.1-3,9.4+20],
    w: 45
  },
  u: {
    path: "c0,0,-16.1,28.3,0,28.3c13.6,0,20,-28.3,20,-28.3s-8.3,28.3,2.9,28.3",
    start: [16.2,39.3],
    tangent: [16.2,39.3],
    w: 45
  },
  v: {
    path: "c6.8,0,6.5,28.3,12.1,28.3s10.4-28.3,16.3-28.3",
    start: [10,39.3],
    tangent: [0,39.3],
    w: 45
  },
  w: {
    path: "c4.8,0,-0.1,28.3,9.1,28.3s13.4,-14.2,13.4,-14.2s2,14.2,11.4,14.2s6.9,-28.3,13.3,-28.3",
    start: [9,39.3],
    tangent: [9,39.3],
    w: 65
  },
  x: {
    path: "m19.5,0l-19.3,28.4m-0.2,-28.4c6,0,7.8,5,9.8,14.2s5.3,14.5,11.3,14.2",
    start: [13.5,39.3],
    tangent: [13.5-10,39.3],
    w: 45
  },

  y:{
    path: "c6.7,0,4.2,7.8,2.8,10.8c-1.3,3.1,-5.2,15.7,5.4,15.7s18.3,-24.8,18.6,-27.5c0.3,-2.7,-8.4,59.8,-28.5,56.5c-7.3,-1.2,17.5,-18,27.3,-27.9",
    start: [13.7, 40.4],
    tangent: [13.7-9.2, 40.4],
    w: 48.2
  },
  z: {
    path: "c9.4,0,16.5,6.8,-5.5,21.7c15.2,1.6,4.2,22,1.1,26.3c-3.1,4.3,-8.8,8.6,-12.7,4.8c-3.7,-3.7,7.7,-24.4,26.5,-24.4",
    start: [25.3, 39.3],
    tangent: [25.3 -9.2, 39.3],
    w: 48.2
  }
}

let appendLetter = (stringOfLetters, letter) =>{

}

let wordToPath = (word) => {
  if(!word){
    return null
  }else{
    word = word.toLowerCase();
  }
  var pointer = 0
  var path = ""
  var joint = `M ${paths[word[0]].start[0]} ${paths[word[0]].start[1]}`
  for(var i in word){
    var char = word[i];
    if(char == ' '){
        pointer += 45

    }else{
      if(i != 0){
        console.log(paths[char].tangent);
        if(word[i-1] == ' '){
          joint = `M ${paths[char].start[0] + pointer} ${paths[char].start[1]}`
        }else{
          joint = `S ${paths[char].tangent[0] + pointer} ${paths[char].tangent[1]} ${paths[char].start[0] + pointer} ${paths[char].start[1]}`
        }
      }
      path += `${joint} ${paths[char].path}`;
      pointer += paths[char].w;
    }
  }
  return `<svg viewBox = "0 0 ${pointer+100} 100"><path d = "${path}" class = "my-font-style" /></svg>`
}
